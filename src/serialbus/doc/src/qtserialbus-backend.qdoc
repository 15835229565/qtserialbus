/****************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see http://www.qt.io/terms-conditions. For further
** information use the contact form at http://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file. Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: http://www.gnu.org/copyleft/fdl.html.
** $QT_END_LICENSE$
**
****************************************************************************/
/*!
    \page qtserialbus-backend-dev.html
    \title Developing Qt Serial Bus Backend

    \brief Information for serial bus backend developers.

    To create a new plugin for Qt Serial Bus, you should be familiar with the following classes:
    \l QSerialBusPluginInterface, \l QSerialBusBackendFactory, \l QSerialBusBackend, and
    \l QSerialBusDevice.

    The plugin's main class should be inherited from \l QSerialBusPluginInterface and
    \l QSerialBusBackendFactory.

    We are going to create a plugin for a serial bus that we are going to call \e exotic. Our serial
    bus will have two backends: \e variant1 and \e variant2. \l QSerialBus will call
    \l {QSerialBusPluginInterface::}{registerBus()} to register the plugin.

    \code
    class ExoticBusPlugin : public QObject, public QSerialBusPluginInterface, public QSerialBusBackendFactory
    {
    Q_OBJECT
    Q_PLUGIN_METADATA(IID "org.qt-project.Qt.QSerialBusPluginInterface" FILE "plugin.json")
    Q_INTERFACES(QSerialBusPluginInterface)

    public:
        void registerBus()
        {
            const QByteArray id("exotic");
            QSerialBus::registerBackend(id, this);
        }

        QSerialBusBackend *createBackend(const QString &bus, const QString &name) const
        {
            if (bus == QStringLiteral("variant1")) {
                QSerialBusBackend *backend = new ExoticVariant1Backend(name);
                return backend;
            } else if (bus == QStringLiteral("variant2")) {
                QSerialBusBackend *backend = new ExoticVariant2Backend(name);
                return backend;
            }
            return Q_NULLPTR;
        }
    };
    \endcode

    Both backends must be inherited from \l QSerialBusBackend. \l QSerialBusDevice requires
    \l QSerialBusBackend in its constructor. \l QSerialBusDevice provides very basic functionality.
    It inherits from \l QIODevice and provides a basic implementation mandated by QIODevice.
    \l QSerialBusDevice should be inherited by specialized devices to support their specific needs.
    For example, see \l QCanBusDevice.
*/
