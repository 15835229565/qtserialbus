/****************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see http://www.qt.io/terms-conditions. For further
** information use the contact form at http://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file. Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: http://www.gnu.org/copyleft/fdl.html.
** $QT_END_LICENSE$
**
****************************************************************************/
/*!
    \page qtserialbus-socketcan-overview.html
    \title Using SocketCAN with Qt Serial Bus

    \brief Overview of how to use SocketCAN with Qt Serial Bus.

    \l QCanBusDevice provides an API for CAN access and plugins. It is inherited from
    QSerialBusDevice. All access to the CAN is handled by \l QCanBusDevice.

    \l QCanFrame defines a CAN frame that can be written and read from QCanBusDevice.

    \section1 Creating CAN Bus Devices

    For example, we can create a device for CAN bus communication via a SocketCAN backend. In the
    following example code, we have an active CAN interface, \e can0. The SocketCAN backend is part
    of a CAN plugin. In the CAN plugin, we want to use the SocketCAN backend:

    \code
        QPointer<QSerialBus> serialBus = QSerialBus::instance();
        QSerialBusBackend *socketCanBackend = serialBus->createBackend("can", "socketcan", "can0");
        QPointer<QCanBusDevice> socketCanDevice = new QCanBusDevice(socketCanBackend, this);

        socketCanDevice->open(QIODevice::ReadWrite);
    \endcode

    The device is now open and can be written and read:

    \code
        QCanFrame frame;
        frame.setFrameId(8);
        QByteArray payload("A36E");
        frame.setPayload(payload);
        socketCanDevice->writeFrame(frame);
    \endcode

    The reading can be done using the \l {QCanBusDevice::}{readFrame()} method. The
    \l {QIODevice::}{readyRead()} signal is emitted when a new frame is available for reading:

    \code
    QCanFrame frame = socketCanDevice->readFrame();
    \endcode

    SocketCAN provides the following configurations that can be controlled through
    \l {QCanBusDevice::}{setConfigurationParameter()}:

    \table
        \header
            \li Configuration parameter
            \li Description
        \row
            \li LoopBack
            \li To meet the multiple-user needs, the local loopback is enabled by default.
        \row
            \li ReceiveOwnMessages
            \li The reception of the CAN frames on the same socket that was sending the CAN frame
            is assumed to be unwanted and therefore disabled by default.
        \row
            \li ErrorMask
            \li A CAN interface driver can generate so called \e {Error Message Frames} that can
                optionally be passed to the user application in the same way as other CAN frames.
                The possible errors are divided into different error classes that may be filtered
                using the appropriate error mask. The values for the error mask are defined in
                \c {linux/can/error.h}.
        \row
            \li CanFilter
            \li A CAN filter can contain multiple filters, each of which contains two variables.
                Therefore, the value of \c CanFilter is a nested QVariant. The first QVariant
                contains QList<QVariant> that contains QHash<QString, QVariant>. This last QHash
                contains two keys: \c FilterId and \c CanMask.
    \endtable

    For example:

    \code
        QList<QVariant> var;
        QHash<QString, QVariant> hash;
        hash.insert(QStringLiteral("FilterId"), 0x12);
        hash.insert(QStringLiteral("CanMask"), 0x1FFFFFFFU);
        var.append(hash);
        canDevice->setConfigurationParameter(QStringLiteral("CanFilter"), var);
    \endcode

    Efficient frame format and flexible data-rate are supported in SocketCAN.
 */
